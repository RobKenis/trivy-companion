package vulnerabilityreport

import (
	"context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/dynamic"
)

type Report struct {
	Name string
}

type Reports interface {
	List() ([]Report, error)
}

type kubernetesReports struct {
	client dynamic.Interface
}

func NewKubernetesReports(client dynamic.Interface) Reports {
	return &kubernetesReports{
		client: client,
	}
}

func (r *kubernetesReports) List() ([]Report, error) {
	var gvr = schema.GroupVersionResource{Group: "aquasecurity.github.io", Version: "v1alpha1", Resource: "vulnerabilityreports"}
	result, err := r.client.Resource(gvr).List(context.Background(), metav1.ListOptions{})
	if err != nil {
		return nil, err
	}
	var reports []Report
	for _, item := range result.Items {
		reports = append(reports, Report{Name: item.GetName()})
	}
	return reports, nil
}
