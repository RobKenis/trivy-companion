package vulnerabilityreport

import (
	"context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/dynamic"
)

type Reports interface {
	List() ([]Report, error)
}

type kubernetesReports struct {
	client dynamic.Interface
}

func NewKubernetesReports(client dynamic.Interface) Reports {
	return &kubernetesReports{
		client: client,
	}
}

func (r *kubernetesReports) List() ([]Report, error) {
	var gvr = schema.GroupVersionResource{Group: "aquasecurity.github.io", Version: "v1alpha1", Resource: "vulnerabilityreports"}
	result, err := r.client.Resource(gvr).List(context.Background(), metav1.ListOptions{})
	if err != nil {
		return nil, err
	}
	var reports []Report
	for _, item := range result.Items {
		reports = append(reports, r.toReport(item))
	}
	return reports, nil
}

func (r *kubernetesReports) toReport(item unstructured.Unstructured) Report {
	repository, _, _ := unstructured.NestedString(item.Object, "report", "artifact", "repository")
	tag, _, _ := unstructured.NestedString(item.Object, "report", "artifact", "tag")
	digest, _, _ := unstructured.NestedString(item.Object, "report", "artifact", "digest")
	registry, _, _ := unstructured.NestedString(item.Object, "report", "registry", "server")
	return Report{
		Name: item.GetName(),
		ScanMetadata: ScanMetadata{
			Origin: Origin{
				Container: item.GetLabels()["trivy-operator.container.name"],
				Namespace: item.GetLabels()["trivy-operator.resource.namespace"],
			},
			Artifact: Artifact{
				Repository: repository,
				Tag:        tag,
				Digest:     digest,
				Registry:   registry,
			},
		},
	}
}
